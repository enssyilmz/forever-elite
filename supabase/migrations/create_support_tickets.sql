-- Create the support_tickets table
CREATE TABLE public.support_tickets (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    subject varchar(255) NOT NULL,
    content text NOT NULL,
    status varchar(50) DEFAULT 'open' NOT NULL,
    priority varchar(20) DEFAULT 'normal' NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    admin_response text,
    admin_response_at timestamp with time zone
);

-- Add comments for clarity
COMMENT ON TABLE public.support_tickets IS 'Stores user support tickets and requests.';
COMMENT ON COLUMN public.support_tickets.status IS 'Ticket status: open, in_progress, resolved, closed';
COMMENT ON COLUMN public.support_tickets.priority IS 'Ticket priority: low, normal, high, urgent';

-- Enable Row Level Security (RLS)
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;

-- Policy: Allow users to view their own tickets
CREATE POLICY "Enable read for users based on user_id" ON public.support_tickets
    FOR SELECT USING (auth.uid() = user_id);

-- Policy: Allow users to insert their own tickets
CREATE POLICY "Enable insert for users based on user_id" ON public.support_tickets
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Policy: Allow users to update their own tickets (limited fields)
CREATE POLICY "Enable update for users based on user_id" ON public.support_tickets
    FOR UPDATE USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Create an index for better performance
CREATE INDEX idx_support_tickets_user_id ON public.support_tickets(user_id);
CREATE INDEX idx_support_tickets_status ON public.support_tickets(status);
CREATE INDEX idx_support_tickets_created_at ON public.support_tickets(created_at DESC);

-- Trigger for updating updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_support_tickets_updated_at 
    BEFORE UPDATE ON public.support_tickets 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column(); 